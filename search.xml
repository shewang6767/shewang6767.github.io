<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>初学react</title>
      <link href="/2024/03/15/dva/"/>
      <url>/2024/03/15/dva/</url>
      
        <content type="html"><![CDATA[<h3 id="model的数据管理"><a href="#model的数据管理" class="headerlink" title="model的数据管理"></a>model的数据管理</h3><p>在umi搭建的项目中的 <strong>约定式的 model 组织方式</strong>如下：</p><p><img src="https://img-blog.csdnimg.cn/8f3a45b903cc4a5b948c8d12b0646e38.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0Mjk3NzM4,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="1，model里有些啥？"><a href="#1，model里有些啥？" class="headerlink" title="1，model里有些啥？"></a>1，model里有些啥？</h4><p>model里其实就是一个对象，我们把这个对象导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//namespace命名空间，相当于给model取个名字，但是各个model的namespce是不能重复的</span></span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="comment">//state我理解为是数据仓库，就是存数据的地方，model里的数据都是存放在这里的</span></span><br><span class="line">  state : &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;wang&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*reducers把数据存到仓库（存到state）里的唯一方法，我们修改state里的数据不能直接像this.name=&#x27;liu&#x27;这样去修改，而必须通过调用reducers里的方法，在之后会详细讲到*/</span></span><br><span class="line">  <span class="attr">reducers</span>:&#123;</span><br><span class="line"> <span class="comment">//必须return，否则会报错</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*异步方法，简单来说我们的异步请求就写在这里*/</span></span><br><span class="line">  <span class="attr">effects</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*订阅，在这里我的理解就是监听页面的，比如监听到进入了某某页面就让它执行相关代码之类的*/</span></span><br><span class="line">  <span class="attr">subscriptions</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2，connect详解"><a href="#2，connect详解" class="headerlink" title="2，connect详解"></a>2，connect详解</h4><p>怎么把model和我们写的组件关联起来呢？只需要用到connect就可以啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;dva&#x27;</span>       <span class="comment">// 首先从dva中导入connect</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Index</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过connect把model和我们写的Index关联起来，之后会解释mapStateToProps，先这样写，test是model的命名空间</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">&#123;test&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...test</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">Index</span>);</span><br></pre></td></tr></table></figure><p>connect接收四个参数</p><blockquote><p><strong>connect(mapStateToProps, mapDispatchToProps,mergeProps,options)</strong></p><p>mapStateToProps允许我们将   store   中的数据作为 props 绑定到组件上。<br>mapDispatchToProps将       action   作为props绑定到组件上。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mapStateToProps</span>(<span class="params">state, ownprops</span>) &#123;    <span class="comment">// ownprops 容器组件的props（未映射state）</span></span><br><span class="line">    <span class="keyword">return</span> &#123; obj &#125;   <span class="comment">// 必须返回一个对象      // model的state，对象名就是model的命名空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mapStateToProps</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="attr">data</span>: state.<span class="property">base</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 很明显了，我们在mapStateToProps 里返回什么，组件的props就会接收到什么</span></span><br></pre></td></tr></table></figure><h4 id="3，dva数据流向"><a href="#3，dva数据流向" class="headerlink" title="3，dva数据流向"></a>3，dva数据流向</h4><p>简单理解：</p><ul><li>通过页面或者订阅（subscription ） 用 dispatch 调用reducer和effects里面的函数</li><li>effects里实现services请求，把数据通过reducer放进state</li><li>在connect和组件连接，在页面中拿到model的数据</li><li>页面调接口 &#x3D;&gt;  dispatch effects</li><li>页面改model数据  &#x3D;&gt; dispatch  reducer</li></ul><h4 id="4，reducer"><a href="#4，reducer" class="headerlink" title="4，reducer"></a>4，reducer</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与组件关联后，用法如下</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;test/save&#x27;</span>,<span class="attr">payload</span>: &#123;<span class="attr">msg</span>: <span class="string">&#x27;你好呀&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aaa98fb2a1854c0aba24558d7c71c374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0Mjk3NzM4,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="5，effects"><a href="#5，effects" class="headerlink" title="5，effects"></a>5，effects</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*函数名 (action, effects) &#123; <span class="comment">// action跟上面一样，&#123; put，call，select &#125; = effect</span></span><br><span class="line">    <span class="comment">// call 调异步接口，</span></span><br><span class="line">    <span class="comment">// put 调reducer方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> umi-dva </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学react</title>
      <link href="/2024/03/15/chu-shi-umi/"/>
      <url>/2024/03/15/chu-shi-umi/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现有node环境，保持在10.13版本以上</span></span><br><span class="line">$ node -v</span><br><span class="line">v10<span class="number">.13</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐yarn管理依赖</span></span><br><span class="line"># 国内源</span><br><span class="line">$ npm i yarn tyarn -g</span><br><span class="line"># 后面文档里的 yarn 换成 tyarn</span><br><span class="line">$ tyarn -v</span><br><span class="line"></span><br><span class="line"># 阿里内网源</span><br><span class="line">$ tnpm i yarn @ali/yarn -g</span><br><span class="line"># 后面文档里的 yarn 换成 ayarn</span><br><span class="line">$ ayarn -v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建项目  在新建的文件夹下</span></span><br><span class="line">$ yarn create @umijs/umi-app</span><br><span class="line"><span class="comment">// 安装依赖</span></span><br><span class="line">yarn install   或   yarn</span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><h2 id="Umi-项目"><a href="#Umi-项目" class="headerlink" title="Umi 项目"></a>Umi 项目</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── package.<span class="property">json</span>    <span class="comment">//包含插件和插件集，以 @umijs/preset-、@umijs/plugin-、umi-preset- 和 umi-plugin- 开头的依赖会                       被自动注册为插件或插件集</span></span><br><span class="line">├── dist       <span class="comment">// 执行umi build后打包好的文件，后期要部署到服务器</span></span><br><span class="line">├── mock       <span class="comment">// 存储mock文件，模拟的一些数据，，此处的js和ts文件会被解析成mock文件</span></span><br><span class="line">├── public     <span class="comment">// 此处的文件会被copy到输出路径，变通的数据资源目录，和无需打包的资源</span></span><br><span class="line">└── src       <span class="comment">// 源码</span></span><br><span class="line">    ├── .<span class="property">umi</span>               <span class="comment">// 临时文件，如入口文件，路由等，不要提交到仓库，它会在dev和build时重新生成</span></span><br><span class="line">    ├── layouts/index.<span class="property">tsx</span>       <span class="comment">//约定式路由时的全局布局文件</span></span><br><span class="line">    ├── pages                   <span class="comment">// 存放所有路由组件</span></span><br><span class="line">     ├── index.<span class="property">less</span></span><br><span class="line">        └── index.<span class="property">tsx</span></span><br><span class="line">    ├── models                  <span class="comment">// 数据流</span></span><br><span class="line">    ├── wrappers                <span class="comment">// 权限管理</span></span><br><span class="line">    └── app.<span class="property">ts</span>（.<span class="property">js</span>）       <span class="comment">// 运行时配置文件，在这儿可扩展运行时的能力，如修改路由，修改render方法</span></span><br><span class="line">├── <span class="variable language_">global</span>.<span class="property">css</span>         <span class="comment">// 约定的全局样式文件，自动引入，也可以用 global.less</span></span><br><span class="line">├── .<span class="property">umirc</span>.<span class="property">ts</span>        <span class="comment">// 配置文件，包含 umi 内置功能和插件的配置   🔺</span></span><br><span class="line">├──  config / config.<span class="property">js</span>    <span class="comment">// 同 .umirc.ts 二选一就行</span></span><br><span class="line">├── .<span class="property">editorconfig</span>    <span class="comment">// 编辑器高亮支持</span></span><br><span class="line">├── .<span class="property">env</span>             <span class="comment">// 环境变量，</span></span><br><span class="line">├── .<span class="property">gitignore</span>       <span class="comment">// git忽略文件</span></span><br><span class="line">├── tsconfig.<span class="property">json</span>    <span class="comment">// ts的配置文件</span></span><br><span class="line">├── typings.<span class="property">d</span>.<span class="property">ts</span>     <span class="comment">// ts文件</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">umirc</span>.<span class="property">ts</span> 或  config/config.<span class="property">ts</span>   配置项目和插件，支持es6</span><br><span class="line"><span class="comment">// 如果项目复杂也可以拆分</span></span><br><span class="line">congig/route.<span class="property">ts</span>   路由配置</span><br><span class="line">config/config.<span class="property">ts</span></span><br><span class="line"><span class="comment">// 本地临时配置，可新建.umirc.local.ts, 最后会和。umirc.ts做deep merge（深合并）形成最终配置</span></span><br><span class="line"> .<span class="property">umirc</span>.<span class="property">local</span>.<span class="property">ts</span>仅在umi dev时有效，umi build时不会被加载</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// js代码提示</span></span><br><span class="line"> ？</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 多份环境多份配置</span></span><br><span class="line"></span><br><span class="line"> 通过指定<span class="variable constant_">UMI_ENV</span>=cloud</span><br></pre></td></tr></table></figure><h3 id="运行时配置"><a href="#运行时配置" class="headerlink" title="运行时配置"></a>运行时配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 约定src/app.tsx为运行时配置</span><br><span class="line">区别于上是 运行在浏览器端，注意不要引入node依赖</span><br></pre></td></tr></table></figure><p>formatMessage</p><ol><li>调用<code>formatMessage</code>函数，并将参数对象作为参数传递给它。</li><li><code>formatMessage</code>函数将根据消息ID查找相应的消息文本，并对其进行格式化处理。</li><li>函数返回格式化后的消息文本，可以在应用程序中使用该文本。</li></ol><h3 id="构建时配置"><a href="#构建时配置" class="headerlink" title="构建时配置"></a>构建时配置</h3><img src="D:\webstorm\typora\images\image-20231128174303368.png" alt="image-20231128174303368" style="zoom:67%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// umirc.ts 文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">nodeModulesTransform</span>: &#123;    <span class="comment">// node modules 目录下依赖文件的编译方法</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;none&#x27;</span>   <span class="comment">// （none 或 all） none快 兼容性低 all 慢 兼容性高</span></span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>:<span class="string">&#x27;@/pages/index&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">fastRefresh</span>:&#123;&#125;,    <span class="comment">// 快速刷新，可以保持组件状态，同时编辑提供及时反馈</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8081</span>,   <span class="comment">// .env权限更高</span></span><br><span class="line">        <span class="attr">https</span>: <span class="literal">true</span>   <span class="comment">// https 安全访问</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;UMI3&#x27;</span>,     <span class="comment">// 标题</span></span><br><span class="line">    <span class="attr">favicon</span>: <span class="string">&#x27;地址&#x27;</span>    <span class="comment">// 线上，线下都可以</span></span><br><span class="line"><span class="attr">dynamicImport</span>: &#123;</span><br><span class="line">        <span class="attr">loading</span>: <span class="string">&#x27;@/components/loading&#x27;</span>, <span class="comment">// 按需加载时指定的loading</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mountElementId</span>: <span class="string">&#x27;app&#x27;</span>,  <span class="comment">// 指定渲染的html根元素</span></span><br><span class="line">    theme    <span class="comment">// pc端主题色</span></span><br><span class="line"><span class="comment">// 手机端主题：v2版本跟pc端配置一样， v5版本可以在src下配置全局的样式文件global.less</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="模板约定"><a href="#模板约定" class="headerlink" title="模板约定"></a>模板约定</h3><p>默认的umi项目目录没有html，自己创建再pages下的 document.ejs 书写自己的代码</p><p>自定义项目入口</p><p>组件库:</p><img src="D:\webstorm\typora\images\image-20231211224005505.png" alt="image-20231211224005505" style="zoom: 33%;" /><p>移动端antd-mobile-v2或者 antd-mobile-v5两个版本：@umijs&#x2F;preset-react包 更新到最新</p><h3 id="图片和其他资源引入："><a href="#图片和其他资源引入：" class="headerlink" title="图片和其他资源引入："></a>图片和其他资源引入：</h3><p>1，传到CDN，在js或者css输入绝对地址，（数据图片）</p><p>2，放到项目目录，在js或css中引入，（写死的）相对路径，如果图片小于10kb，还会被转化为base64</p><img src="D:\webstorm\typora\images\image-20231212131536159.png" alt="image-20231212131536159" style="zoom:67%;" /><h3 id="less-样式模块化"><a href="#less-样式模块化" class="headerlink" title="less-样式模块化"></a>less-样式模块化</h3><p>没有内置sass</p><img src="D:\webstorm\typora\images\image-20231212132043349.png" alt="image-20231212132043349" style="zoom:50%;" /><img src="D:\webstorm\typora\images\image-20231212132614045.png" alt="image-20231212132614045" style="zoom:50%;" /><h3 id="hooks-函数式-编写组件"><a href="#hooks-函数式-编写组件" class="headerlink" title="hooks + 函数式 编写组件"></a>hooks + 函数式 编写组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 组件() &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> 组件 = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用hooks</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 函数  变量</span></span><br><span class="line">    <span class="keyword">return</span> jsx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> [&#125;, [依赖项])  <span class="comment">// 类似于useEffect</span></span><br><span class="line"><span class="title function_">useCallback</span>()</span><br></pre></td></tr></table></figure><h3 id="路由，动态，权限，约定式"><a href="#路由，动态，权限，约定式" class="headerlink" title="路由，动态，权限，约定式"></a>路由，动态，权限，约定式</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置:"></a>配置:</h4><img src="D:\webstorm\typora\images\image-20231212142053195.png" alt="image-20231212142053195" style="zoom:50%;" /><img src="D:\webstorm\typora\images\image-20231212142842774.png" alt="image-20231212142842774" style="zoom: 50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="string">&#x27;@/layouts/base-layouts&#x27;</span>,</span><br><span class="line">        <span class="attr">routes</span>: [                   <span class="comment">// 子路由</span></span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: <span class="string">&#x27;@/pages/login&#x27;</span> &#125;，</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;/reg&#x27;</span>, <span class="attr">component</span>: <span class="string">&#x27;@/pages/reg&#x27;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/goods&#x27;</span>,</span><br><span class="line">                <span class="attr">wrappers</span>: [<span class="string">&#x27;@/wrappers/auth&#x27;</span>],        <span class="comment">// 授权路由配置项wrappers  ，访问goods，会先满足auth的条件</span></span><br><span class="line">                <span class="attr">component</span>: <span class="string">&#x27;@/layouts/aside-ayouts&#x27;</span>,</span><br><span class="line">                <span class="attr">routes</span>: [</span><br><span class="line">                    &#123; <span class="attr">path</span>: <span class="string">&#x27;/goods&#x27;</span>， <span class="attr">component</span>: <span class="string">&#x27;@/pages/goods&#x27;</span>&#125;,</span><br><span class="line">                    &#123; <span class="attr">path</span>: <span class="string">&#x27;/goods/:id&#x27;</span>, <span class="attr">component</span>: <span class="string">&#x27;@/pages/goods/goods-detail&#x27;</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/login&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="页面跳转，参数接收"><a href="#页面跳转，参数接收" class="headerlink" title="页面跳转，参数接收"></a>页面跳转，参数接收</h4><h5 id="传参："><a href="#传参：" class="headerlink" title="传参："></a>传参：</h5><img src="D:\webstorm\typora\images\image-20231212144328918.png" alt="image-20231212144328918" style="zoom:50%;" /><img src="D:\webstorm\typora\images\image-20231212151956365.png" alt="image-20231212151956365" style="zoom: 50%;" /><img src="D:\webstorm\typora\images\image-20231212152547223.png" alt="image-20231212152547223" style="zoom:50%;" /><h5 id="接收："><a href="#接收：" class="headerlink" title="接收："></a>接收：</h5><img src="D:\webstorm\typora\images\image-20231212153049279.png" alt="image-20231212153049279" style="zoom: 50%;" /><p>1，路由上下文</p><img src="D:\webstorm\typora\images\image-20231212153022013.png" alt="image-20231212153022013" style="zoom:50%;" /><p>2，hooks</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useHistory, useLocaltion, useParams, useRouteMatch &#125; form <span class="string">&#x27;umi&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">GoodsDetail</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; sreach &#125; = useLocaltion;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = useParams</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据模拟umi-mock"><a href="#数据模拟umi-mock" class="headerlink" title="数据模拟umi-mock"></a>数据模拟umi-mock</h3><p>mock目录： 在根目录下，或者在page的目录下（同时在这目录下的mock加上下标_mock）</p><img src="D:\webstorm\typora\images\image-20231212154023015.png" alt="image-20231212154023015" style="zoom: 50%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 支持值为 object和Array</span></span><br><span class="line">    <span class="string">&#x27;GET /umi/goods&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">errorCode</span>: <span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line"><span class="attr">errorMessage</span>: <span class="string">&#x27;ooo&#x27;</span>,</span><br><span class="line">        <span class="attr">showType</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">traceId</span>: <span class="string">&#x27;i&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: [</span><br><span class="line">&#123; <span class="attr">id</span>: <span class="number">1</span>，<span class="attr">name</span>: <span class="string">&#x27;韭菜&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;西红柿&#x27;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写成函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> <span class="string">&#x27;post /api/users/create&#x27;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">     res.<span class="title function_">send</span>(<span class="string">&#x27;ok&#x27;</span>);      <span class="comment">// 发送数据</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，模拟延时</span><br><span class="line"><span class="keyword">import</span> &#123; delay &#125; <span class="keyword">from</span> <span class="string">&#x27;roadhog-api-doc&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">delay</span>(</span><br><span class="line">&#123;  和上面写的一样  &#125;,     <span class="comment">// 接口</span></span><br><span class="line"><span class="number">2000</span>,  <span class="comment">//时间</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>，登录验证，判断管理员</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="string">&#x27;POST /umi/login&#x27;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">        <span class="keyword">if</span> (username===<span class="string">&#x27;alex&#x27;</span>&amp;&amp; password === <span class="string">&#x27;alex123&#x27;</span>) &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">err</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;成功&#x27;</span></span><br><span class="line">                <span class="attr">currentAuthority</span>:  <span class="string">&#x27;user&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (username ===  <span class="string">&#x27;admin&#x27;</span> &amp;&amp; password === <span class="string">&#x27;admin123&#x27;</span>) &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">err</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;成功&#x27;</span></span><br><span class="line">                <span class="attr">currentAuthority</span>:  <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">err</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;失败&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>，模拟数据增删改查</span><br><span class="line"><span class="comment">// 增加</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="string">&#x27;POST /umi/login&#x27;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">        res.<span class="title function_">send</span>(</span><br><span class="line">        <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">            <span class="string">&#x27;data|1&#x27;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">data</span>: &#123; ...req.<span class="property">body</span>, <span class="attr">a</span>: <span class="number">2</span> &#125;,</span><br><span class="line">                    <span class="attr">msg</span>: <span class="string">&#x27;成功&#x27;</span>，</span><br><span class="line">                &#125;，</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">msg</span>: <span class="string">&#x27;失败&#x27;</span></span><br><span class="line">                &#125;，</span><br><span class="line">            ]，</span><br><span class="line">        &#125;).<span class="property">data</span>，</span><br><span class="line">      )；</span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="string">&#x27;DELETE /umi/login&#x27;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>.<span class="property">id</span>);     <span class="comment">// 拿到删除的id</span></span><br><span class="line">        res.<span class="title function_">send</span>(</span><br><span class="line">        <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">            <span class="string">&#x27;data|1&#x27;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">data</span>: &#123; <span class="attr">task_id</span>: <span class="number">123</span> &#125;,    <span class="comment">// 删除数据</span></span><br><span class="line">                    <span class="attr">msg</span>: <span class="string">&#x27;成功&#x27;</span>，</span><br><span class="line">                &#125;，</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">msg</span>: <span class="string">&#x27;失败&#x27;</span></span><br><span class="line">                &#125;，</span><br><span class="line">            ]，</span><br><span class="line">        &#125;).<span class="property">data</span>，</span><br><span class="line">    );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改</span></span><br><span class="line">    <span class="string">&#x27;PATCH /umi/list/:id&#x27;</span>: <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);     <span class="comment">// 修改的数据</span></span><br><span class="line">        res.<span class="title function_">send</span>(</span><br><span class="line">        <span class="title class_">Mock</span>.<span class="title function_">mock</span>(&#123;</span><br><span class="line">            <span class="string">&#x27;data|1&#x27;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="attr">data</span>: &#123; ...req.<span class="property">body</span> &#125;,  <span class="comment">// 修改后的数据和原本的数据进行一个合并</span></span><br><span class="line">                    <span class="attr">msg</span>: <span class="string">&#x27;成功&#x27;</span>，</span><br><span class="line">                &#125;，</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">msg</span>: <span class="string">&#x27;失败&#x27;</span></span><br><span class="line">                &#125;，</span><br><span class="line">            ]，</span><br><span class="line">        &#125;).<span class="property">data</span>，</span><br><span class="line">    );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据模拟-json-server"><a href="#数据模拟-json-server" class="headerlink" title="数据模拟 json-server"></a>数据模拟 json-server</h3><p>第三方</p><p>新建jsonserver， jsonserver下的db.js</p><h3 id="fetch请求"><a href="#fetch请求" class="headerlink" title="fetch请求"></a>fetch请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetch，js自带</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/umi/login&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="comment">// header: &#123;&#125;     原生fetch不会携带默认的请求头，需要手动添加</span></span><br><span class="line">        <span class="attr">body</span>: <span class="string">&#x27;username=alex&amp;password=alex123&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fetch login&#x27;</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="umi-request请求"><a href="#umi-request请求" class="headerlink" title="umi-request请求"></a>umi-request请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span></span><br><span class="line"><span class="comment">// 用法 request(url, options)   ~~axios.get(url,options)    res =&gt; res.data</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Goods</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&#x27;/umi/goods&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Login</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">request</span>(<span class="string">&#x27;/umi/login&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">username</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">            <span class="attr">password</span>: <span class="string">&#x27;admin123&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="umi-useRequest请求"><a href="#umi-useRequest请求" class="headerlink" title="umi-useRequest请求"></a>umi-useRequest请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须返回一个data字段，如果没有，可能会产生拿不到数据的情况</span></span><br><span class="line"><span class="comment">// 可以在config文件中，配置request: &#123; darafield: &#x27;&#x27;, &#125;  设置为空，这样就不会受到是否有data字段的影响。</span></span><br><span class="line">使用useRequest</span><br><span class="line"><span class="keyword">import</span> &#123; useRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span></span><br><span class="line"><span class="comment">// umi-mock</span></span><br><span class="line"><span class="keyword">const</span> &#123; data, error, loading &#125; = <span class="title function_">useRequest</span>(<span class="string">&#x27;/umi/goods&#x27;</span>)</span><br><span class="line"><span class="comment">// data: 拿到的数据， error: 产生的错误， loading: 加载中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线上接口</span></span><br><span class="line"><span class="keyword">const</span> &#123; data, error, loading &#125; = <span class="title function_">useRequest</span>( url )</span><br><span class="line"><span class="comment">// Access-Control-Allow-Origin 跨域</span></span><br><span class="line"><span class="comment">/* 在config 中引入一个代理的模块  proxy.js 在这个文件中配置代理内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 参数 json-server</span></span><br><span class="line"><span class="keyword">const</span> &#123; data, error, loading, run1, run2 &#125; = <span class="title function_">useRequest</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/umi/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;alex&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;alex123&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// umi-useRequest 可以跟第二个参数</span></span><br><span class="line">&#123; <span class="attr">manual</span>: <span class="literal">true</span> &#125;  <span class="comment">// 手动通过运行run触发   通过调用run1来触发请求</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮询</span></span><br><span class="line"><span class="keyword">const</span> &#123; data, loading, error &#125; = <span class="title function_">useRequest</span>(</span><br><span class="line"><span class="function">(<span class="params">_limit</span>) =&gt;</span> (&#123;       <span class="comment">// 接收参数， 也可以直接写成对象 &#123; &#125;</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123; _limit &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">pollingInterval</span>: <span class="number">1000</span>,   <span class="comment">// 轮询一秒读一次</span></span><br><span class="line">        <span class="attr">pollingWhenHidden</span>: <span class="literal">false</span>, <span class="comment">// 屏幕不可见时，暂停轮询</span></span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h3><p>dva &#x3D; React-Router + Redux + Redux-saga</p><ul><li>路由： <a href="https://github.com/ReactTraining/react-router/tree/v2.8.1">React-Router</a></li><li>架构： <a href="https://github.com/reactjs/redux">Redux</a></li><li>异步操作： <a href="https://github.com/yelouafi/redux-saga">Redux-saga</a></li></ul><p>状态管理。dva是一个基于 <a href="https://link.juejin.cn/?target=https://github.com/reduxjs/redux">redux</a> 和 <a href="https://link.juejin.cn/?target=https://github.com/redux-saga/redux-saga">redux-saga</a> 的数据流方案。</p><p>dva 内置fetch，react-router，也可说是一个轻量级框架</p><p>早期dva本身是一个轻量级框架，现在dva当作插件被  umi框架  已经内置了</p><table><thead><tr><th align="center"></th><th align="center">redux</th><th align="center">dva</th></tr></thead><tbody><tr><td align="center">状态数据</td><td align="center">state</td><td align="center">state</td></tr><tr><td align="center">行为描述</td><td align="center">action</td><td align="center">action</td></tr><tr><td align="center">同步的、无副作用业务</td><td align="center">reducer</td><td align="center">reducer</td></tr><tr><td align="center">异步的、有副作用（定时器）业务</td><td align="center">creators</td><td align="center">effect</td></tr><tr><td align="center">通讯请求修改状态函数</td><td align="center">dispatch</td><td align="center">dispatch</td></tr><tr><td align="center">通讯请求获取状态函数</td><td align="center">connect</td><td align="center">connect</td></tr><tr><td align="center">从源获取数据</td><td align="center">无</td><td align="center">subscription</td></tr></tbody></table><h5 id="数据流向"><a href="#数据流向" class="headerlink" title="数据流向"></a>数据流向</h5><p><img src="D:\webstorm\typora\images\image-20231213114316919.png" alt="image-20231213114316919"></p><h5 id="使用：全局局部"><a href="#使用：全局局部" class="headerlink" title="使用：全局局部"></a>使用：全局局部</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局的数据</span></span><br><span class="line">在 src 下的models文件夹</span><br><span class="line">这个文件夹下的所有js文件都会认为是公共的全局的数据</span><br><span class="line"><span class="comment">//  1，建立对应的模块。例：global.js   对外暴露一个对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespace</span>: <span class="string">&#x27;文件名即可&#x27;</span>，  <span class="comment">// 不允许重名</span></span><br><span class="line">    <span class="attr">state</span>: &#123;<span class="comment">// 初始化全局数据</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">login</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;全局&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">reducers</span>: &#123;<span class="comment">// reducers 处理同步业务</span></span><br><span class="line">        <span class="title function_">setText</span>(<span class="params">state, action</span>) &#123;     <span class="comment">// action 接收的参数，action.payload</span></span><br><span class="line">            <span class="comment">// 更新并返回修改后的数据</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">effects</span>: &#123;<span class="comment">// effects 处理异步业务   状态机函数？？？</span></span><br><span class="line">        *<span class="title function_">login</span>(<span class="params"> action, &#123; call, put, select &#125;</span>) &#123;      <span class="comment">// action.payload 接收的参数，可以解构 &#123; payload &#125;</span></span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">call</span>(request, &#123; payload &#125;);   <span class="comment">// call() 触发异步请求 select() 从上面的公共仓库获取</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="title function_">put</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">payload</span>: data &#125;)<span class="comment">//  put() 异步取回数据后，调用reducer同步修改数据，数据</span></span><br><span class="line">        &#125;                                                   <span class="comment">// yield 类似于await</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2，在组件中使用</span></span><br><span class="line">导入 connect</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span></span><br><span class="line">在暴露组件时，对组件进行修饰</span><br><span class="line"><span class="keyword">const</span> 组件名(props) &#123;&#125;   <span class="comment">// props 接收state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>( <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 取全局， 重命名属性名</span></span><br><span class="line">    <span class="attr">text</span>: state.<span class="property">golbal</span>.<span class="property">text</span>,</span><br><span class="line">&#125;) )( 组件名 );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3，dispatch 触发</span></span><br><span class="line">props.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;模块名(命名空间) / 某一个方法&#x27;</span>，</span><br><span class="line">    <span class="attr">payload</span>: &#123;&#125;,  <span class="comment">// 参数会在函数的 action.payload 中</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 局部的数据</span></span><br><span class="line">如果页面的数据不多，可以建一个页面独享的数据，在pages当前页面的model.<span class="property">js</span></span><br><span class="line">如果页面数据很多，也可以建一个models文件夹，存放多个模块数据</span><br><span class="line">当前的页面是可以向上访问全局数据的，但不能向下访问。</span><br><span class="line"><span class="comment">// model.js中</span></span><br><span class="line">对外暴露一个对象</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespace</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">reducers</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">effects</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组件中使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>( <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 取局部model</span></span><br><span class="line">    <span class="attr">namespace</span>: state.<span class="property">golbal</span>.<span class="property">text</span>,</span><br><span class="line">&#125;) )( 组件名 );</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// connect 把model和component 连接起来</span></span><br><span class="line"><span class="comment">// dva 提供了 connect 方法。如果你熟悉 redux，这个 connect 就是 react-redux 的 connect</span></span><br><span class="line">例：</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(<span class="function">(<span class="params">&#123; products &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  products,</span><br><span class="line">&#125;))(<span class="title class_">Products</span>);</span><br><span class="line"></span><br><span class="line">@connect语法糖</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;dva&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">todos</span>: state.<span class="property">todos</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">// connect 方法返回的也是一个 React 组件，通常称为容器组件。因为它是原始 UI 组件的容器，即在外面包了一层 State。</span></span><br><span class="line"><span class="comment">// connect 方法传入的第一个参数是 mapStateToProps 函数，mapStateToProps 函数会返回一个对象，用于建立 State 到 Props 的映射关系</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 丢弃connect</span></span><br><span class="line">如果是子组件中也使用数据，不必用connect</span><br><span class="line"><span class="number">1</span>，获取dispatch</span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch, useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span></span><br><span class="line"><span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>();        <span class="comment">// 用于触发同步或异步来修改数据</span></span><br><span class="line"><span class="number">2</span>, 获取数据</span><br><span class="line"><span class="keyword">const</span> &#123; namespace.<span class="property">state</span> &#125; = <span class="title function_">useSelector</span>( <span class="function">() =&gt;</span> (&#123; namespace &#125;) )</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// subscriptions</span></span><br><span class="line">定义数据源的变化，</span><br><span class="line">收纳一些自定义函数</span><br><span class="line"><span class="title function_">fn</span>(<span class="params">&#123; dispatch, history &#125;</span>) &#123; <span class="comment">// 业务逻辑 &#125;</span></span><br></pre></td></tr></table></figure><h5 id="action"><a href="#action" class="headerlink" title="action"></a>action</h5><blockquote><p>是一个js对象。改变state的唯一途径。</p><p>action必须带type属性指明行为，发起action需用dispatch函数</p><p>需要注意的是 <code>dispatch</code> 是在组件 connect Models以后，通过 props 传入的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="dispatch-函数"><a href="#dispatch-函数" class="headerlink" title="dispatch 函数"></a>dispatch 函数</h5><blockquote><p> dipatch 可以看作是触发这个行为的方式，而 Reducer 则是描述如何改变数据的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;user/add&#x27;</span>, <span class="comment">// 如果在 model 外调用，需要添加 namespace</span></span><br><span class="line">  <span class="attr">payload</span>: &#123;&#125;, <span class="comment">// 需要传递的信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h5><blockquote><p>Action 处理器，处理异步动作，基于 Redux-saga 实现。Effect 指的是副作用。根据函数式编程，计算以外的操作都属于 Effect，典型的就是 I&#x2F;O 操作、数据库读写。</p><p>Effect 是一个 Generator 函数，内部使用 yield 关键字，标识每一步的操作（不管是异步或同步）。</p><p>dva 提供多个 effect 函数内部的处理函数，比较常用的是 <code>call</code> 和 <code>put</code>。</p><ul><li>call：执行异步函数</li><li>put：发出一个 Action，类似于 dispatch</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">addAfter1Second</span>(<span class="params">action, &#123; put, call &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">call</span>(delay, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">put</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;add&#x27;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="dva的几个规则"><a href="#dva的几个规则" class="headerlink" title="dva的几个规则:"></a>dva的几个规则:</h5><p>1、通过dispatch调用namespace&#x2F;effects<br>2、state(状态)<br>3、effects (异步操作)</p><p>- 函数必须带*，也就是生成器。<br>- 第一个参数，可以拓展为{payload, callback}<br>- 第二个参数，call和put<br>- call 就是调用 async的action函数<br>- put就是调用reducers的函数来更新state。</p><p>4、reducers</p><p>5、dva是以model为单位的，所有的应用逻辑都在上面</p><h3 id="运行时配置-1"><a href="#运行时配置-1" class="headerlink" title="运行时配置"></a>运行时配置</h3><ol><li><p>渲染前的权限校验</p></li><li><p>动态路由读取、添加</p></li><li><p>路由监听，埋点统计</p></li><li><p>拦截器</p></li></ol><h3 id="组件权限"><a href="#组件权限" class="headerlink" title="组件权限"></a>组件权限</h3><p>配置开启。同时需要 <code>src/access.ts</code> 提供权限配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">access</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// access 插件依赖 initial State 所以需要同时开启</span></span><br><span class="line">  <span class="attr">initialState</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们约定了 src/access.ts 为我们的权限定义文件，该文件需要默认导出一个方法，导出的方法会在项目初始化时被执行。该方法需要返回一个对象，对象的每一个值就对应定义了一条权限。如下所示：</span></span><br><span class="line"><span class="comment">// src/access.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">initialState</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; userId, role &#125; = initialState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">canReadFoo</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">canUpdateFoo</span>: role === <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">canDeleteFoo</span>: <span class="function">(<span class="params">foo</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> foo.<span class="property">ownerId</span> === userId;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="API"><a href="#API" class="headerlink" title="API"></a>API</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">useAccess</span><br><span class="line"><span class="comment">//我们提供了一个 Hooks 用于在组件中获取权限相关信息，如下所示</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useAccess &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PageA</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; foo &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> access = <span class="title function_">useAccess</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (access.<span class="property">canReadFoo</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果可以读取 Foo，则...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>TODO<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">PageA</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配合 Access 组件可以很简单的实现页面内的元素的权限控制。</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useAccess, <span class="title class_">Access</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;umi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PageA</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; foo &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> access = <span class="title function_">useAccess</span>(); <span class="comment">// access 的成员: canReadFoo, canUpdateFoo, canDeleteFoo</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (access.<span class="property">canReadFoo</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果可以读取 Foo，则...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Access</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">accessible</span>=<span class="string">&#123;access.canReadFoo&#125;</span>         // <span class="attr">是否有权限</span>，<span class="attr">通常通过</span> <span class="attr">useAccess</span> <span class="attr">获取后传入进来</span>。</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Can not read foo content.<span class="tag">&lt;/<span class="name">div</span>&gt;</span> &#125;       / //无权限时的显示，默认无权限不显示任何内容。</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        Foo content.</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Access</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// optimus-ui/access.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> initialState =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; initFunctions, currentUser &#125; = initialState;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      routePath is not required, if not provided, the key will be used as pathname</span></span><br><span class="line"><span class="comment">      when routePath has variable ex: /xxx/xxx/:externalRef, routePath must be provided</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      parent Component ex:</span></span><br><span class="line"><span class="comment">        import &#123; useRouteMatch &#125; from &#x27;umi&#x27;</span></span><br><span class="line"><span class="comment">        const &#123; path &#125; = useRouteMatch();</span></span><br><span class="line"><span class="comment">        checkPermission(key, path))</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">checkPermission</span>: <span class="function">(<span class="params">key, routePath = <span class="literal">undefined</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> path = routePath || <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line">      <span class="keyword">const</span> groups = currentUser[<span class="string">&#x27;cognito:groups&#x27;</span>] || [];</span><br><span class="line">      <span class="keyword">if</span> (groups.<span class="title function_">includes</span>(<span class="string">&#x27;Administrator&#x27;</span>) || groups.<span class="title function_">includes</span>(<span class="string">&#x27;admin&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (initFunctions <span class="keyword">instanceof</span> <span class="title class_">Map</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> keys = initFunctions.<span class="title function_">get</span>(path);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(keys) &amp;&amp; keys.<span class="title function_">includes</span>(key)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> umi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学react</title>
      <link href="/2024/03/15/chu-xue-react/"/>
      <url>/2024/03/15/chu-xue-react/</url>
      
        <content type="html"><![CDATA[<p><img src="D:\webstorm\typora\images\image-20231112234525576.png" alt="image-20231112234525576"></p><h1 id="React介绍"><a href="#React介绍" class="headerlink" title="React介绍"></a>React介绍</h1><p>由Meta公司（facebook）研发，是一个用于    构建Web（网页）    和   原生交互界面 （ios或者Android）    的库</p><h3 id="React优势（流行）"><a href="#React优势（流行）" class="headerlink" title="React优势（流行）"></a>React优势（流行）</h3><p>相对于传统基于DOM开发的优势：组件化的开发方式，不错的性能（传统的Dom性能差）</p><p>相较于其它前端框架的优势：丰富的生态是所有框架中最好的（Vue，Angular），跨平台（构建web，原生app），</p><h1 id="React开发环境搭建"><a href="#React开发环境搭建" class="headerlink" title="React开发环境搭建"></a>React开发环境搭建</h1><h3 id="使用create-react-app快速搭建开发环境"><a href="#使用create-react-app快速搭建开发环境" class="headerlink" title="使用create-react-app快速搭建开发环境"></a>使用create-react-app快速搭建开发环境</h3><p>create-react-app是一个快速   创建React开发环境  的工具，底层由Webpack构建，封装了配置细节，开箱即用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app react-basic</span><br><span class="line"><span class="comment">// npx   Node.js工具命令，查找并执行后续的包命令</span></span><br><span class="line"><span class="comment">// create-react-app     核心包(固定写法)，用于创建React项目</span></span><br><span class="line"><span class="comment">// 项目名（自定义）</span></span><br><span class="line">npm start    <span class="comment">// 启动项目</span></span><br></pre></td></tr></table></figure><p>官网：<a href="https://zh-hans.react.dev/learn/start-a-new-react-project">https://zh-hans.react.dev/learn/start-a-new-react-project</a></p><img src="D:\webstorm\typora\images\image-20231113001302857.png" alt="image-20231113001302857" style="zoom: 67%;" /><p>项目目录：package.json   项目配置文件：dependencies核心包，自定义命令，</p><p>​src 源码目录   创建项目只保留两个文件： App.js   和  index.js（项目入口文件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js 项目的入口文件    其他文件将它们组合在一起，并将最终成果注入 public 文件夹里面的 index.html 中</span></span><br><span class="line"><span class="comment">// 再清理index.js文件中不需要的部分   再清app.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（最核心的两个包：react，react-dom）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="comment">// 项目的根组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把  App根组件  渲染到  id为root  的dom节点上</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js项目的根组件</span></span><br><span class="line"><span class="comment">// app.js的引入到index.js,被一些核心代码渲染到public里面的index.html（root的div上）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      this is react</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h1 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h1><p>概念：JSX是 JavaScript 和  XML  (HTML)  的缩写，表示在 JS代码中编写HTML模版结构 ,  它是React中   编写UI模版  的方式</p><p>优势：1，html的声明式模板语法    2，js的可编程能力</p><p>jsx的本质：jSX 不是标准的]S语法，是]5的语法扩展，浏览器本身不能识别，需要通过解析工具（babel）做解析之后才能在浏览器中运行</p><p><img src="D:\webstorm\typora\images\image-20231113235316257.png" alt="image-20231113235316257"></p><h3 id="识别js表达式"><a href="#识别js表达式" class="headerlink" title="识别js表达式"></a>识别js表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// 在 jSX 中可以通过 &#123;&#125; 大括号语法识别 JavaScript 中的表达式，比如常见的变量、函数调用、方法调用等等</span></span><br><span class="line"><span class="comment">// jsx 通过</span></span><br><span class="line"><span class="comment">// React 组件必须返回单个 JSX 元素  最外边只能有一层div</span></span><br><span class="line"><span class="comment">// 组件以大写字母开头</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      this is react</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      // 1，使用引号传递字符串</span></span><br><span class="line"><span class="language-xml">      &#123;‘this is react’&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      // 2，使用javascript变量</span></span><br><span class="line"><span class="language-xml">  &#123; sum &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      // 3，函数调用和方法调用</span></span><br><span class="line"><span class="language-xml">      &#123; get() &#125;</span></span><br><span class="line"><span class="language-xml">      &#123; new Date().getDate() &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      // 4，使用对象</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;</span> &#123; <span class="attr">color</span>=<span class="string">&#x27;red&#x27;</span>&#125; &#125;&gt;</span>this is react<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  注意: if语句、switch语句、变量声明属于语句，不是表达式，不能出现在&#123;&#125;中</span></span><br></pre></td></tr></table></figure><h3 id="实现列表渲染（要有key属性）"><a href="#实现列表渲染（要有key属性）" class="headerlink" title="实现列表渲染（要有key属性）"></a>实现列表渲染（要有key属性）</h3><p>原生js中map方法</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">简单条件渲染</span><br><span class="line">逻辑与 &amp;&amp;                 <span class="comment">// 只控制一个元素的显示隐藏</span></span><br><span class="line"> &#123; isLogin &amp;&amp;  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>   woshispan    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> &#125;</span><br><span class="line">三元表达式              <span class="comment">// 控制两个元素来回切换</span></span><br><span class="line">isLogin ? <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> loading <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span> woshisapna <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  复杂条件渲染</span><br><span class="line">  <span class="comment">// 根据不同的状态场景显示不同的模式</span></span><br><span class="line">  方案：自定义函数 + <span class="keyword">if</span>判断</span><br></pre></td></tr></table></figure><h3 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中声明  事件处理  函数来响应事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;You clicked me!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 获取事件形参e</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="title function_">log</span>(<span class="string">&#x27;点击了&#x27;</span>,e)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法： on事件名=&#123; 事件处理函数名 &#125;     驼峰命名</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>    // 没有小括号</span></span><br><span class="line"><span class="language-xml">      Click me</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果想传递自定义参数， 要改造成箭头函数引用   就像 onClick=&#123; () =&gt; &#123;handleClick( 参数 )&#125; &#125;  在箭头中调这个函数</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> () =&gt;</span> handleClick( 参数 ) &#125;&gt;     <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同时传递事件对象e 和 形参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">参数, e</span>) &#123;&#125;</span><br><span class="line">&lt;button onClick=&#123; <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">handleClick</span>( 参数, e ) &#125; &gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>（首字母大写函数，UI界面的一部分，可以嵌套，复用，有自己的逻辑和外观 ）</p><p>常规函数 function  Button()  {}</p><p>箭头函数 const    Button  &#x3D; （）&#x3D;&gt;    {}</p><h3 id="usestate"><a href="#usestate" class="headerlink" title="usestate"></a>usestate</h3><p>添加状态变量（数据驱动视图）</p><p>usestate 修改状态的规则：状态不可变</p><p>​react中，状态被认为是只读的，如果想要修改，应该是替换掉，而不是直接修改，直接改的话不能引起试图更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先，从 React 引入 useState是一个函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 组件中声明一个 state 变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// ...当前值  count     用于更新它的函数（setCount）    useState(0)里面传的是初始值</span></span><br><span class="line">    <span class="comment">// 命名规则 [something, setSomething] 这样为它们命名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//   修改复杂状态（对象）的情况</span></span><br><span class="line">setForm  &#123; ...原本的对象，name：<span class="string">&#x27; john &#x27;</span> &#125; ）   <span class="comment">//   展开原来的对象，后边输入新的属性或方法，有的就替换，没有就是添加</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次显示按钮时，count 的值为 0，因为你把 0 传给了 useState()。</span></span><br><span class="line"><span class="comment">// 当你想改变 state 时，调用 setCount() 并将新的值传递给它。点击该按钮计数器将递增</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Clicked &#123;count&#125; times</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尝试多次渲染  同一个组件， 每个组件都会拥有自己的 state。 你可以尝试点击不同的按钮</span></span><br><span class="line"><span class="comment">// 注意，每个按钮会 “记住” 自己的 count，而不影响其他按钮</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counters that update separately<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Clicked &#123;count&#125; times</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组件的样式处理"><a href="#组件的样式处理" class="headerlink" title="组件的样式处理"></a>组件的样式处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行内  &lt;div style=&#123; color=&quot;red&quot; &#125;&gt;    不推荐</span></span><br><span class="line"><span class="comment">// 在 React 中，你可以使用 `className` 来指定一个 CSS 的 class。它与 HTML 的 class 属性的工作方式相同：</span></span><br><span class="line"><span class="comment">/* 在引入的 CSS文件中 */</span>  前提是你引入了css文件 <span class="keyword">import</span> ’./css‘</span><br><span class="line">.<span class="property">avatar</span> &#123;</span><br><span class="line">  border-<span class="attr">radius</span>: <span class="number">50</span>%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">classNames简单的js库，通过 条件 动态的控制<span class="keyword">class</span>类的显示</span><br><span class="line">例如：className=&#123;<span class="title function_">classNames</span>(<span class="string">&#x27;静态的类名&#x27;</span>)，&#123; <span class="attr">active</span>: 条件表达式 &#125;  &#125;</span><br><span class="line">下载 npm install classNames</span><br><span class="line">导入</span><br></pre></td></tr></table></figure><h3 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h3><p>  就是state状态 控制  表单状态属性value值    他俩做一个绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// state状态值</span></span><br><span class="line"><span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">// input 的value绑定 state的value</span></span><br><span class="line">&lt;input value=&#123;value&#125; onChange=&#123; <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">setValue</span>(e.<span class="property">target</span>.<span class="property">value</span>)&#125;</span><br></pre></td></tr></table></figure><p>react获取dom操作dom</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="comment">// useRef 钩子函数   创建ref对象</span></span><br><span class="line"> <span class="keyword">const</span> inputRef = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line"> <span class="comment">// 与jsx绑定</span></span><br><span class="line"> &lt;input type=’text‘  ref=&#123;inputRef&#125; /&gt;</span><br><span class="line"><span class="number">2</span><span class="comment">// dom可用时  inputRef.current 获取即可</span></span><br><span class="line">  用ref对象身上的属性</span><br></pre></td></tr></table></figure><h3 id="组件间共享数据（通信）"><a href="#组件间共享数据（通信）" class="headerlink" title="组件间共享数据（通信）"></a>组件间共享数据（通信）</h3><h4 id="父子之间："><a href="#父子之间：" class="headerlink" title="父子之间："></a>父子之间：</h4><img src="D:\webstorm\typora\images\image-20231123151535264.png" alt="image-20231123151535264" style="zoom: 67%;" /><ol><li>​    父组件传，子组件绑定属性，子组件接收props，是一个对象，就可以使用</li><li>​props可以传任意数据（数组，对象，数字，字符串，函数，布尔，jsx，），子组件不能修改props，只能父修改</li><li>​    children 特殊的props，的一个属性，识别    内容嵌套在子组件内时</li><li>​    子传父：子组件调用父组件中的方法，先要父组件传处理函数过去，子组件调用然后可以传参数</li></ol><h4 id="兄弟之间："><a href="#兄弟之间：" class="headerlink" title="兄弟之间："></a>兄弟之间：</h4><img src="D:\webstorm\typora\images\image-20231123155833303.png" alt="image-20231123155833303" style="zoom:67%;" /><p>状态提升：通过共同的父组件，a组件  &#x3D;&gt;  父组件 &#x3D;&gt; b组件</p><p>在前面的例子中，每个按钮都有自己的state，但是常常需要组件共享数据一起更新，所以需要 各个state ’向上‘移动到最接近所有按钮的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  state 上移到 MyApp 中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line"><span class="comment">// 接着，将 MyApp 中的点击事件处理函数以及 state 一同向下传递到 每个 MyButton 中。你可以使用 JSX 的大括号向 MyButton 传递信息</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counters that update separately<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MyButton</span> <span class="attr">count</span>=<span class="string">&#123;count&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... moving code from here ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后，改变 MyButton 以 读取 从父组件传递来的 prop：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyButton</span>(<span class="params">&#123; count, onClick &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      Clicked &#123;count&#125; times</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先是state上移到了包裹所有按钮的组件，再通过点击事件处理函数和state一同向下传递到每个button中</p><p>这种传递方式叫prop，要在子组件中接收</p><p>新的 <code>count</code> 值会被作为 prop 传递给每个按钮，因此它们每次展示的都是最新的值。这被称为“状态提升”。</p><h4 id="跨层级组件："><a href="#跨层级组件：" class="headerlink" title="跨层级组件："></a>跨层级组件：</h4><p>context</p><img src="D:\webstorm\typora\images\image-20231123161804835.png" alt="image-20231123161804835" style="zoom:67%;" /><p>用createContext方法创建一个对象（最外层），在顶层组件中，用对象.Provider 组件（高阶组件）提供数据，在底层组件中用useContext钩子函数获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顶层组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">对象.Provider</span> <span class="attr">value</span>=<span class="string">&#123;</span> <span class="attr">数据</span> &#125;&gt;</span> 内容 <span class="tag">&lt;/<span class="name">对象.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 底层组件</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="keyword">const</span> msg = <span class="title function_">useContext</span>(数据)   <span class="comment">//接收</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><p>组件没有发生任何用户事件, 组件渲染完毕就要和服务端请求数据,      这个过程叫只由渲染引起的操作</p><p>比如:  发送请求,  更改dom</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法   两个参数</span></span><br><span class="line"><span class="comment">// 第一个  是一个函数,也叫副作用函数,是我们要执行对的操作</span></span><br><span class="line"><span class="title function_">useEffect</span>( <span class="function">() =&gt;</span> &#123;   可执行操作   &#125;, [] )</span><br><span class="line"><span class="comment">// 第二个  依赖项数组,依赖项不同会决定前面副作用函数的执行时机..</span></span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>,空数组依赖时候, 组件只在初始渲染时执行一次</span><br><span class="line">   <span class="number">2</span>,当没有依赖项时, 组件初始渲染时执行一次 + 组件更新渲染时执行</span><br><span class="line">   <span class="number">3</span>,有特定依赖项时, 组件初始渲染时执行一次 + 特定依赖项变化执行  例:[state]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由渲染本身引起的，</span></span><br><span class="line"><span class="comment">// 清除副作用: 比如在useEffect的副作用函数中做了一些操作,有时需要及时清除掉,比如开启了定时器</span></span><br><span class="line"><span class="comment">// 清除最好的时机：组件被卸载的时候</span></span><br><span class="line">...语法:</span><br><span class="line">    <span class="title function_">useEffect</span>( <span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 在副作用函数中return</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 清除副作用的逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; ,[])</span><br></pre></td></tr></table></figure><h3 id="Hook函数"><a href="#Hook函数" class="headerlink" title="Hook函数"></a>Hook函数</h3><p>以 <code>use</code> 开头的函数被称为 <strong>Hook</strong>。比如：useState、useEffect    是 React 提供的内置 Hook，实现逻辑封装和复用。你可以在 <a href="https://react.docschina.org/reference/react">React API 参考</a> 中找到其他内置的 Hook。也可以根据现有的Hook编写自己的Hook。Hook 比普通函数更为严格</p><p>你只能在你的组件（或其他 Hook）的 <strong>顶层</strong> 调用 Hook。如果你想在一个条件或循环中使用 <code>useState</code>，请提取一个新的组件并在组件内部使用它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义hook(逻辑复用)    1.声明use开头的函数</span></span><br><span class="line"><span class="comment">// 比如布尔值频繁切换的场景</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useToggle</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 2.写复用的代码逻辑</span></span><br><span class="line">    <span class="keyword">const</span> [ value, setValue] = <span class="title function_">useState</span>(<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; &#123; <span class="title function_">setValue</span>(!value )&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 3.那些状态（数据）或者 回调函数 需要在其他地方使用就return出去</span></span><br><span class="line">        value,</span><br><span class="line">        toggle</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.使用的时候直接解构出来 const &#123; value, toggle &#125; = useToggle()</span></span><br></pre></td></tr></table></figure><h4 id="ReactHooks使用规则"><a href="#ReactHooks使用规则" class="headerlink" title="ReactHooks使用规则"></a>ReactHooks使用规则</h4><ol><li>只能在组件中  或者  其他自定义hook中 调用 （ 组件外不可以用 ）</li><li>只能在组件的顶层调用，不能嵌套在if ，for， 或者其他的函数中</li></ol><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>为了“记住”一些东西，组件使用 <em>state</em></p><p>要从多个子组件中收集数据，或让两个子组件相互通信，请在其父组件中声明共享state，父组件可以通过props将该state传回给子组件。这样子组件彼此同步并与其父组件保持同步。</p><p>prop中子无法修改父</p><p>在 React 中，通常使用 <code>onSomething</code> 命名代表事件的 props，使用 <code>handleSomething</code> 命名处理这些事件的函数。</p><h3 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h3><p>在案例中，没有直接修改数组的原数据，而是.slice() 出一个新副本，修改这个副本。在一般情况中，要么修改原数据，要么修改副本，都可以满足我们的需求，但是用副本来说，有几个好处：可以实现复杂的功能，在案例中可以实现一个回溯的功能，此功能有广泛的应用，撤销和重做某些操作是应用的常见功能</p><h3 id="时光回溯"><a href="#时光回溯" class="headerlink" title="时光回溯"></a>时光回溯</h3><p>每次落子都用slice创建了新的副本，这可以视为原数组squares不变， 把过去的squares存在一个新的数组中，这个数组视为一个新的state变量</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>渲染列表时：要有key属性作为区分</p><h1 id="props-和-state"><a href="#props-和-state" class="headerlink" title="props   和   state"></a>props   和   state</h1><p>props 就像是你传递的参数至函数，它使父组件传递数据给子组件，</p><p>state  就像是组件的内存，对一些数据进行追踪，并根据交互来改变值，</p><h1 id="react对可见设计和应用构建的思考"><a href="#react对可见设计和应用构建的思考" class="headerlink" title="react对可见设计和应用构建的思考"></a>react对可见设计和应用构建的思考</h1><p>构建用户界面，分解成组件，把组件链接在一起，使数据流经它们</p><h4 id="步骤一：将UI拆解为组件层级结构"><a href="#步骤一：将UI拆解为组件层级结构" class="headerlink" title="步骤一：将UI拆解为组件层级结构"></a>步骤一：将UI拆解为组件层级结构</h4><img src="D:\webstorm\typora\images\image-20231122151840463.png" alt="image-20231122151840463" style="zoom:50%;" /><p>现在你已经在原型中辨别了组件，并将它们转化为了层级结构。</p><p>在原型中，组件可以展示在其它组件之中，在层级结构中如同其孩子一般:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|---<span class="title class_">FilterableProductTable</span></span><br><span class="line">    |--<span class="title class_">SearchBar</span></span><br><span class="line">    |--<span class="title class_">ProductTable</span></span><br><span class="line">     |--<span class="title class_">ProductCategoryRow</span></span><br><span class="line">    |--<span class="title class_">ProductRow</span></span><br></pre></td></tr></table></figure><h4 id="步骤二：使用-React-构建一个静态版本"><a href="#步骤二：使用-React-构建一个静态版本" class="headerlink" title="步骤二：使用 React 构建一个静态版本"></a>步骤二：使用 React 构建一个静态版本</h4><p>有了组件的层级结构后，最直接的办法就是构建一个不带交互的静态版本，再一一添加交互，</p><p>既可以从层级高的组件自上而下构建（小案例），也可以从底层级组件构建（大项目）</p><p>在我们构建好了组件之后，我们就有了待渲染的可复用组件库，这是静态的，最顶层的组件将接收数据作为其prop传递给子组件，称为单向数据流</p><h4 id="步骤三：找出-UI-精简且完整的-state-表示（找出state）"><a href="#步骤三：找出-UI-精简且完整的-state-表示（找出state）" class="headerlink" title="步骤三：找出 UI 精简且完整的 state 表示（找出state）"></a>步骤三：找出 UI 精简且完整的 state 表示（找出state）</h4><p>不是state的情况：</p><p>​需要修改的数据</p><p>​通过props从父组件传递</p><p>​无法基于已存在于组件中的state和props计算出新的东西</p><h4 id="步骤四：验证state应该放在哪里"><a href="#步骤四：验证state应该放在哪里" class="headerlink" title="步骤四：验证state应该放在哪里"></a>步骤四：验证state应该放在哪里</h4><p>目的：搞清楚哪个组件应该拥有哪个state</p><p>对每一个state进行以下分析：</p><p>​1，看看每一个基于特定state渲染的组件</p><p>​2，寻找他们最近并且共同的父组件</p><p>​3，最后，决定这个state放在哪里</p><pre><code>              1。一般情况直接放在父组件上就可以</code></pre><p>​  2。或者放在父组件的父组件</p><p>​  3。如果找不到，可以创建单独的组件来存放state，并将它添加到他们父组件上层的某个地方。</p><h4 id="步骤五：添加反向数据流"><a href="#步骤五：添加反向数据流" class="headerlink" title="步骤五：添加反向数据流"></a>步骤五：添加反向数据流</h4><h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><p>react常用的状态管理工具（类似Pinia，Vuex），可以独立运行，不绑定react</p><img src="D:\webstorm\typora\images\image-20231126082400166.png" alt="image-20231126082400166" style="zoom:50%;" /><img src="D:\webstorm\typora\images\image-20231213171828374.png" alt="image-20231213171828374" style="zoom: 50%;" /><p>state：对象，存放我们管理的状态数据</p><p>action：对象，描述怎么修改state</p><p>reducer：函数，根据action 生成新的 state</p><h2 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1，定义reducer函数（两个参数）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params"> state, action </span>) &#123;</span><br><span class="line">    <span class="comment">// state 对象 ，初始的数据状态，</span></span><br><span class="line">    <span class="comment">// action对象 上的属性type，标记当前想要做什么样的修改  action.type</span></span><br><span class="line">    <span class="comment">// reducer作用，根据不同的action，返回新的state</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">        <span class="comment">// 数据不可变，基于初始state，返回生成新的 state</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2，用reducer函数生成store实例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(reducer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3,用store实例中的subscribe方法 监测（订阅）数据的变化</span></span><br><span class="line">store.<span class="title function_">subscribe</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 回调函数 在数据一发生变化就执行</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;state 变化了&#x27;</span>)</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4，用store实例中的dispatch方法，提交一个action对象更新状态</span></span><br><span class="line"><span class="comment">//    Redux中修改数据的唯一方式就是dispatch</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 和reducer函数中type标记的是一样的</span></span><br><span class="line">&#125;).</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5，用store中的getState方法获取最新状态 更新渲染 到视图中</span></span><br><span class="line">store.<span class="title function_">getState</span>()  <span class="comment">// 可以在第三步中进行获取并更新</span></span><br></pre></td></tr></table></figure><h2 id="环境，工具"><a href="#环境，工具" class="headerlink" title="环境，工具"></a>环境，工具</h2><p>两个插件—Redux Toolkit   和 react-redux</p><p>1，Redux Toolkit（RTK）  工具集，简化书写方式，例如：简化store的配置，内置immer可变式状态修改，内置thunk更好的异步创建</p><p>2，链接react  和  redux  的中间件</p><img src="D:\webstorm\typora\images\image-20231126085231056.png" alt="image-20231126085231056" style="zoom: 33%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要有react项目，没有就创建（npx create-react-app react-redux）</span></span><br><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm install @reduxjs/toolkit react-redux</span><br><span class="line"><span class="comment">// 启动项目即可</span></span><br></pre></td></tr></table></figure><h2 id="配合react使用"><a href="#配合react使用" class="headerlink" title="配合react使用"></a>配合react使用</h2><h3 id="先创建store目录-reduxjs-toolkit"><a href="#先创建store目录-reduxjs-toolkit" class="headerlink" title="先创建store目录 (@reduxjs&#x2F;toolkit)"></a>先创建store目录 (@reduxjs&#x2F;toolkit)</h3><img src="D:\webstorm\typora\images\image-20231126085756567.png" alt="image-20231126085756567" style="zoom:33%;" /><p>modules：子模块</p><p>index.js：把子模块导入进去，store的入口文件，最后导出store</p><img src="D:\webstorm\typora\images\image-20231126165940242.png" alt="image-20231126165940242" style="zoom:33%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子模块.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSlice &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span></span><br><span class="line"><span class="comment">// createSlice创建 store</span></span><br><span class="line"><span class="keyword">const</span> counterStore = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;counter&#x27;</span>，     <span class="comment">// store名字</span></span><br><span class="line">    <span class="attr">initialState</span>: &#123;       <span class="comment">// 初始状态数据</span></span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="attr">reducer</span>: &#123;</span><br><span class="line">      <span class="comment">// 修改状态的方法（同步）  action：参数</span></span><br><span class="line">      方法名(state， action ) &#123; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 解构出  创建action对象的函数（actionCreater）</span></span><br><span class="line"><span class="keyword">const</span> &#123; 函数名，。。。  &#125; = counterStore.<span class="property">actions</span></span><br><span class="line"><span class="comment">// 获取reducer函数</span></span><br><span class="line"><span class="keyword">const</span> counterReducer = counterStore.<span class="property">reducer</span></span><br><span class="line"><span class="comment">// 导出    创建action对象的函数   和   reducer  函数</span></span><br><span class="line"><span class="keyword">export</span> &#123; 函数名，。。&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> counterReducer           <span class="comment">// 子模块名</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根store</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> 子模块名 <span class="keyword">from</span> <span class="string">&quot;./modules/counterStore&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建根store 组合子模块</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>: &#123;</span><br><span class="line">        <span class="attr">counter</span>: counterReducer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导出根store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h3 id="为react注入store-react-redux"><a href="#为react注入store-react-redux" class="headerlink" title="为react注入store  (react-redux)"></a>为react注入store  (react-redux)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="comment">// 内置Provider 组件通过 store参数 把创建好的store 实例注入应用中</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span>  <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="comment">// 使用store中的数据</span></span><br><span class="line"><span class="comment">// 要使用钩子函数：useSelector     作用：把store中的数据映射到 组件中</span></span><br><span class="line">例：<span class="keyword">const</span> &#123; 数据名 &#125; = <span class="title function_">useSelector</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">counter</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.</span></span><br><span class="line"><span class="comment">// 修改store中的数据</span></span><br><span class="line"><span class="comment">// 使用另一个hook函数   useDispatch     作用：生成dispatch函数 （提交action对象）</span></span><br><span class="line"><span class="keyword">import</span> &#123; 创建action的函数 &#125; <span class="keyword">from</span> ‘ 子模块 ’</span><br><span class="line"><span class="keyword">import</span> &#123; useDispatch， useSelector &#125; <span class="keyword">from</span> ‘react-redux’</span><br><span class="line">  <span class="comment">// 得到dispatch 函数</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>()</span><br><span class="line">  <span class="comment">// 调用dispatch 提交action (子模块中导出的actionCreater)</span></span><br><span class="line">  <span class="title function_">dispatch</span>( <span class="title function_">action</span>() )</span><br><span class="line">  <span class="title function_">dispatch</span>( <span class="title function_">action</span>( 参数 ) )  <span class="comment">// 调用时传参, 传递的参数会自动跑到，函数的 action.payload 属性中</span></span><br><span class="line">例如： 子模块中 函数名（state， action）&#123;</span><br><span class="line">    state = action.<span class="property">payload</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步操作</span></span><br><span class="line"><span class="comment">// 1.创建store的写法不变，配置好同步修改state的方法</span></span><br><span class="line"><span class="comment">// 2.单独封装一个函数，在这个函数内部return 一个新函数，在新函数中</span></span><br><span class="line"><span class="keyword">function</span> 函数名() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="comment">//   2.1 封装异步请求获取数据</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url)</span><br><span class="line">        <span class="comment">//   2.2 调用同步方法，传入异步数据（获取的数据传参），生成action对象并dispatch提交</span></span><br><span class="line">        <span class="title function_">dispatch</span>(同步中生成action对象的方法() )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.组件中dispatch写法不变</span></span><br></pre></td></tr></table></figure><h1 id="react-Redux"><a href="#react-Redux" class="headerlink" title="react-Redux"></a>react-Redux</h1><blockquote><p>什么是react-redux？ react-redux是一个react插件库,专门用来简化react应用中使用redux。他是从redux封装而来，因此基本原理和redux是一样的，同时存在一些差异。</p></blockquote><img src="D:\webstorm\typora\images\image-20231213171738389.png" alt="image-20231213171738389" style="zoom: 67%;" /><p>React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）</p><h1 id="reactRouter"><a href="#reactRouter" class="headerlink" title="reactRouter"></a>reactRouter</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装reactRouter包</p><p>npm i react-router-dom</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">RouterProvider</span>, createBrowserRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="comment">// 创建router实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createBrowerRouter</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>    <span class="comment">//即支持组件，可以是常规的元素jsx</span></span><br><span class="line">    &#125;,v</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定路由  把根组件替换成RouterProvider组件</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">RouterProvider</span> <span class="attr">router</span>=<span class="string">&#123;router&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">RouterProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="分模块"><a href="#分模块" class="headerlink" title="分模块"></a>分模块</h3><p>page 页面  例如：login.js    article.js</p><p>router 路由模块 index.js  配置路由，把所需要的路由页面导入进去 ，最后把总路由导出</p><h3 id="路由导航"><a href="#路由导航" class="headerlink" title="路由导航"></a>路由导航</h3><p>多个路由之间跳转，有可能携带参数进行通信（两种方式）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1，声明式导航 &lt;link to=&#x27;/article&#x27;&gt;文章&lt;/link&gt; 例：后台左侧的导航跳转</span></span><br><span class="line"><span class="comment">// 当成  a  标签用即可。      指定to属性跳转到path，组件会被渲染成浏览器支持的a标签</span></span><br><span class="line"><span class="comment">// 传参时，通过字符串拼接即可</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.编程式导航 通过hook函数 useNavigate 得到导航方法navigate</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line"><span class="title function_">navigate</span>(<span class="string">&#x27;/article&#x27;</span>)</span><br><span class="line"><span class="comment">// 通过调用这个函数 以命令式 跳转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3,获取当前路由</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span></span><br></pre></td></tr></table></figure><h4 id="跳转传参"><a href="#跳转传参" class="headerlink" title="跳转传参"></a>跳转传参</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以编程式为例，声明式 同理</span></span><br><span class="line"><span class="number">1</span>，searchParams 传参</span><br><span class="line"><span class="comment">// 在跳转时路由？拼接传递的参数  &amp; 链接多个参数</span></span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&#x27;/Article?id=1101&amp;name=jack&#x27;</span>)</span><br><span class="line"><span class="comment">// 在对应路由 中接收参数  hook函数 useSearchParams 数组中解构出 params对象</span></span><br><span class="line">    <span class="keyword">const</span> [params] = <span class="title function_">useSearchParams</span>()</span><br><span class="line">    <span class="comment">// params 身上的get方法获取属性名</span></span><br><span class="line">    <span class="keyword">const</span> id = params.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>，params 传参</span><br><span class="line"><span class="comment">// 跳转时用 / 斜杠</span></span><br><span class="line"><span class="title function_">navigate</span>(<span class="string">&#x27;Article/1001/jack&#x27;</span>)</span><br><span class="line"><span class="comment">// 配置路由时要有占位符</span></span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/Article/:id/:name&#x27;</span></span><br><span class="line"><span class="comment">// 接收参数   hook 函数useParams</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="title function_">useParams</span>()</span><br><span class="line">    <span class="keyword">const</span> id = params.<span class="property">id</span></span><br></pre></td></tr></table></figure><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><img src="D:\webstorm\typora\images\image-20231127174815874.png" alt="image-20231127174815874" style="zoom: 67%;" /><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1，配置子路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Layout</span> /&gt;</span></span>,</span><br><span class="line">        <span class="attr">children</span>: [                   <span class="comment">// 子路由配置</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;board&#x27;</span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Board</span> /&gt;</span></span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;about&#x27;</span>, <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span> /&gt;</span></span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="attr">path</span>: <span class="string">&#x27;/Article&#x27;</span>,</span><br><span class="line">      <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Article</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 2，配置二级路由出口 （渲染的位置） 用&lt;Outlet/&gt;组件</span></span><br><span class="line">    <span class="number">2.1</span> 默认二级路由 访问的是一级路由时，默认的二级路由得到渲染</span><br><span class="line">    在二级路由的配置中 path 换成 index 属性，并设置成 <span class="literal">true</span></span><br><span class="line">    <span class="attr">index</span>: <span class="literal">true</span></span><br><span class="line">    并在 跳转时，更改跳转的路径为  ‘/’</span><br><span class="line">    to=<span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="number">2.2</span> <span class="number">404</span>路由</span><br><span class="line">    输入的url都匹配不到对应的path时，显示的<span class="number">404</span> 兜底组件渲染</span><br><span class="line">    准备一个 <span class="title class_">NotFound</span> 组件</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">NotFound</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="comment">// 自定义模板</span></span><br><span class="line">            )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NotFound</span></span><br><span class="line">在配置的路由表 末尾，以 * 号作为 path 配置路由</span><br><span class="line">        &#123; path： *， element： &lt;<span class="title class_">NotFound</span> /&gt; &#125;</span><br><span class="line">     <span class="number">2.3</span> 两种路由模式</span><br><span class="line">     history 和 hash ，<span class="title class_">ReactRouter</span> 创建路由时一般用的都是 createBrowerRouter，创建hash模式用createHashRouter</span><br><span class="line">     historyurl/login      history对象+pushState事件需要后端支持</span><br><span class="line">     hash       url/#/login    监听hashChange事件不需要</span><br></pre></td></tr></table></figure><h1 id="数据Mock"><a href="#数据Mock" class="headerlink" title="数据Mock"></a>数据Mock</h1><p>在前后端 分离的 开发模式 下，前端可以在 没有 实际的后端接口下，先模拟假数据  进行正常业务的开发</p><img src="D:\webstorm\typora\images\image-20231128171131129.png" alt="image-20231128171131129" style="zoom:50%;" /><p>json - server 实现 数据mock</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 安装 json-server</span></span><br><span class="line"> npm i -D json-server</span><br><span class="line"><span class="comment">// 2. 准备一个json文件，例： data.json</span></span><br><span class="line"><span class="comment">// 3. 添加启动命令，</span></span><br><span class="line"><span class="string">&quot;server&quot;</span>: <span class="string">&quot;json-server ./server/data.json --port 8888&quot;</span></span><br><span class="line"><span class="comment">// 4. 可以访问接口了</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据中表的关系</title>
      <link href="/2024/03/14/shu-ju-zhong-biao-de-guan-xi/"/>
      <url>/2024/03/14/shu-ju-zhong-biao-de-guan-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="表与表之间的关系"><a href="#表与表之间的关系" class="headerlink" title="表与表之间的关系"></a>表与表之间的关系</h3><h4 id="1，一对一关系"><a href="#1，一对一关系" class="headerlink" title="1，一对一关系"></a>1，一对一关系</h4><p>比如有A、B两张表，A表中的每一条数据，在B表中有一条唯一的数据与之对应。</p><p><strong>用户表user：</strong></p><table><thead><tr><th>user_id（用户编号）</th><th>账号username</th><th>密码password</th></tr></thead><tbody><tr><td>001</td><td>admin</td><td>admin888</td></tr><tr><td>002</td><td>itheima</td><td>123456</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/08/hello-world/"/>
      <url>/2024/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
